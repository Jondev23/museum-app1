#!/bin/bash
# chmod +x git_tool.sh
# ./git_tool.sh

echo "üîê GIT SAFETY TOOLKIT"
echo "¬øQu√© quieres hacer?"
echo "1. Hacer respaldo r√°pido (commit)"
echo "2. Crear rama de prueba"
echo "3. Restaura al √∫ltimo commit de la rama actual."
echo "4. Borrar rama de prueba y volver a main"
echo "5. Salir"
echo "6. Fusionar rama actual a main"
echo "7. Ver commits exclusivos de la rama actual"
echo "8. Cambiar de rama"
echo "9. Subir cambios de la rama actual al repositorio remoto"
echo "10. Ver commits del repositorio remoto en la rama actual"
read -p "Opci√≥n: " opcion

case $opcion in
  1)
    read -p "üìù Mensaje del commit (Enter para usar autom√°tico): " mensaje
    if [ -z "$mensaje" ]; then
      mensaje=$(date "+Respaldo autom√°tico %Y-%m-%d %H:%M")
    fi
    git add .
    git commit -m "$mensaje"
    echo "‚úÖ Respaldo creado con mensaje: $mensaje"
    ;;
  2)
    read -p "Nombre de la nueva rama: " rama
    rama_sin_espacios=$(echo "$rama" | tr ' ' '-')
    git checkout -b "$rama_sin_espacios"
    echo "‚úÖ Rama '$rama_sin_espacios' creada y cambiada"
    ;;
  3)
    rama_actual=$(git rev-parse --abbrev-ref HEAD)
    echo "üìç Est√°s en la rama: $rama_actual"
    git reset --hard HEAD
    git clean -fd
    echo "üîÑ Restaurado al √∫ltimo commit HEAD y archivos nuevos eliminados"
    ;;
  4)
    echo "üìã Ramas disponibles:"
    git branch
    echo
    read -p "üîª Ingresa el nombre de la rama a borrar: " rama
    rama_actual=$(git rev-parse --abbrev-ref HEAD)

    if [ "$rama_actual" = "$rama" ]; then
      echo "‚ö†Ô∏è Est√°s actualmente en '$rama'. Se intentar√° cambiar a 'main'..."
      git checkout main || exit 1
    fi

    if git rev-parse --verify "$rama" >/dev/null 2>&1; then
      git branch -D "$rama"
      echo "üßπ Rama '$rama' eliminada y est√°s de vuelta en main"
    else
      echo "‚ùå La rama '$rama' no existe"
    fi
    ;;
  5)
    echo "üëã Saliendo..."
    ;;
  6)
    rama_actual=$(git rev-parse --abbrev-ref HEAD)
    echo "üìç Est√°s en la rama: $rama_actual"
    if [ "$rama_actual" != "main" ]; then
      git checkout main || exit 1
      git merge "$rama_actual"
      echo "‚úÖ Cambios de '$rama_actual' fusionados en 'main'"
    else
      echo "‚ö†Ô∏è Ya est√°s en 'main', no hay rama que fusionar."
    fi
    ;;
  7)
    rama_actual=$(git rev-parse --abbrev-ref HEAD)
    if [ "$rama_actual" = "main" ]; then
      echo "üìç Est√°s en 'main'. Mostrando commits de 'main':"
      git log main --oneline
    else
      echo "üìç Commits exclusivos en '$rama_actual' (no presentes en main):"
      git log main.."$rama_actual" --oneline
    fi
    ;;
  8)
    echo "üìã Ramas disponibles:"
    git branch
    echo
    read -p "üîÅ Ingresa el nombre de la rama a la que quieres cambiar: " nueva_rama
    if git rev-parse --verify "$nueva_rama" >/dev/null 2>&1; then
      git checkout "$nueva_rama"
      echo "‚úÖ Cambiado a la rama '$nueva_rama'"
    else
      echo "‚ùå La rama '$nueva_rama' no existe"
    fi
    ;;
  9)
    rama_actual=$(git rev-parse --abbrev-ref HEAD)
    echo "üöÄ Subiendo la rama '$rama_actual' al repositorio remoto..."
    git push origin "$rama_actual"
    if [ $? -eq 0 ]; then
      echo "‚úÖ Cambios de '$rama_actual' subidos correctamente a origin/$rama_actual"
    else
      echo "‚ùå Error al hacer push. Verifica la configuraci√≥n del remoto o los permisos."
    fi
    ;;
  10)
    rama_actual=$(git rev-parse --abbrev-ref HEAD)
    echo "üì° Obteniendo commits de la rama remota origin/$rama_actual..."
    git fetch origin
    if git show-ref --verify --quiet refs/remotes/origin/"$rama_actual"; then
      git log origin/"$rama_actual" --oneline
    else
      echo "‚ùå La rama remota 'origin/$rama_actual' no existe."
    fi
    ;;
  *)
    echo "‚ùå Opci√≥n no v√°lida"
    ;;
esac 